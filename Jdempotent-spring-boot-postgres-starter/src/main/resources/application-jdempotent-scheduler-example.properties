# =============================================================================
# Jdempotent PostgreSQL Scheduled Cleanup Configuration Examples
# =============================================================================
# 
# This file provides examples of how to configure the Jdempotent PostgreSQL
# scheduled cleanup functionality. Copy the relevant sections to your
# application.properties or application.yml file.
#
# For more information, see:
# - JdempotentPostgresProperties.java
# - JdempotentPostgresSchedulerAutoConfiguration.java
# - JdempotentPostgresCleanupService.java

# =============================================================================
# BASIC CONFIGURATION
# =============================================================================

# Enable the scheduled cleanup task (disabled by default for safety)
jdempotent.postgres.scheduler.enabled=true

# Number of records to delete in each cleanup batch (default: 1000)
# Recommended range: 100-5000 depending on your database performance
jdempotent.postgres.scheduler.batchSize=1000

# =============================================================================
# SCHEDULING CONFIGURATION
# =============================================================================

# Scheduling type: FIXED_RATE, CRON, or NONE
# This property explicitly defines which scheduling mechanism to use.
# Default: NONE
jdempotent.postgres.scheduler.type=FIXED_RATE

# =============================================================================
# SCHEDULING OPTIONS (Configure based on the type chosen above)
# =============================================================================

# -----------------------------------------------------------------------------
# Option 1: Fixed Delay Scheduling
# -----------------------------------------------------------------------------
# Ensures a specific delay between the end of one execution and the start of the next
# Useful when you want to avoid overlapping cleanup operations

# Run cleanup every 5 minutes (300,000 ms) after the previous execution completes
jdempotent.postgres.scheduler.fixedDelay=300000

# Wait 1 minute (60,000 ms) before the first cleanup execution
jdempotent.postgres.scheduler.initialDelay=60000

# -----------------------------------------------------------------------------
# Option 2: Fixed Rate Scheduling  
# -----------------------------------------------------------------------------
# Schedules cleanup operations at regular intervals regardless of execution time
# If cleanup takes longer than the interval, next execution starts immediately after completion

# Run cleanup every hour (3,600,000 ms)
# jdempotent.postgres.scheduler.fixedRate=3600000

# Wait 2 minutes before the first cleanup execution
# jdempotent.postgres.scheduler.initialDelay=120000

# -----------------------------------------------------------------------------
# Option 3: Cron Expression Scheduling (Most Flexible)
# -----------------------------------------------------------------------------
# Provides the most flexible scheduling options using standard cron syntax
# Format: second minute hour day-of-month month day-of-week

# Run every day at 2:00 AM
# jdempotent.postgres.scheduler.cron=0 0 2 * * ?

# Run every 30 minutes
# jdempotent.postgres.scheduler.cron=0 */30 * * * ?

# Run every 6 hours
# jdempotent.postgres.scheduler.cron=0 0 */6 * * ?

# Run every Sunday at midnight
# jdempotent.postgres.scheduler.cron=0 0 0 * * SUN

# Time zone for cron expression (default: UTC)
# jdempotent.postgres.scheduler.zone=UTC
# jdempotent.postgres.scheduler.zone=America/New_York
# jdempotent.postgres.scheduler.zone=Europe/London

# =============================================================================
# POSTGRESQL CONFIGURATION (if not already configured)
# =============================================================================

# Table name for storing idempotent data (default: jdempotent)
jdempotent.postgres.tableName=jdempotent

# Specific EntityManager bean name for multi-database scenarios (optional)
# jdempotent.postgres.entityManagerBeanName=primaryEntityManager

# Whether to persist request/response data (default: true)
jdempotent.cache.persistReqRes=true

# =============================================================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT USE CASES
# =============================================================================

# -----------------------------------------------------------------------------
# High-Frequency Cleanup (for high-traffic applications)
# -----------------------------------------------------------------------------
# jdempotent.postgres.scheduler.enabled=true
# jdempotent.postgres.scheduler.batchSize=500
# jdempotent.postgres.scheduler.fixedDelay=60000
# jdempotent.postgres.scheduler.initialDelay=30000

# -----------------------------------------------------------------------------
# Low-Frequency Cleanup (for low-traffic applications)
# -----------------------------------------------------------------------------
# jdempotent.postgres.scheduler.enabled=true
# jdempotent.postgres.scheduler.batchSize=2000
# jdempotent.postgres.scheduler.cron=0 0 3 * * ?
# jdempotent.postgres.scheduler.zone=UTC

# -----------------------------------------------------------------------------
# Business Hours Only Cleanup
# -----------------------------------------------------------------------------
# jdempotent.postgres.scheduler.enabled=true
# jdempotent.postgres.scheduler.batchSize=1000
# jdempotent.postgres.scheduler.cron=0 0 9-17 * * MON-FRI
# jdempotent.postgres.scheduler.zone=America/New_York

# -----------------------------------------------------------------------------
# Weekend Batch Cleanup
# -----------------------------------------------------------------------------
# jdempotent.postgres.scheduler.enabled=true
# jdempotent.postgres.scheduler.batchSize=5000
# jdempotent.postgres.scheduler.cron=0 0 2 * * SAT,SUN
# jdempotent.postgres.scheduler.zone=UTC

# =============================================================================
# MONITORING AND LOGGING
# =============================================================================

# Enable debug logging for cleanup operations
# logging.level.com.trendyol.jdempotent.postgres.JdempotentPostgresCleanupService=DEBUG

# Enable info logging for scheduler auto-configuration
# logging.level.com.trendyol.jdempotent.postgres.JdempotentPostgresSchedulerAutoConfiguration=INFO

# =============================================================================
# NOTES AND BEST PRACTICES
# =============================================================================
#
# 1. BATCH SIZE CONSIDERATIONS:
#    - Smaller batches (100-500): Better for high-concurrency environments
#    - Larger batches (1000-5000): More efficient for low-concurrency environments
#    - Very large batches (>5000): May cause performance issues and lock contention
#
# 2. SCHEDULING STRATEGY:
#    - Fixed Delay: Best when cleanup operations have variable execution times
#    - Fixed Rate: Best for predictable, consistent cleanup intervals
#    - Cron: Best for complex scheduling requirements (business hours, weekends, etc.)
#
# 3. PERFORMANCE TIPS:
#    - Monitor cleanup execution times and adjust batch size accordingly
#    - Use off-peak hours for large cleanup operations
#    - Consider database load when setting cleanup frequency
#
# 4. SAFETY CONSIDERATIONS:
#    - Always test cleanup configuration in a non-production environment first
#    - Monitor database performance after enabling scheduled cleanup
#    - The cleanup function uses SKIP LOCKED for concurrent safety
#
# 5. TROUBLESHOOTING:
#    - Enable DEBUG logging to see detailed cleanup execution information
#    - Check application logs for cleanup success/failure messages
#    - Verify the PostgreSQL cleanup function exists in your database
#    - Ensure proper database permissions for the cleanup function
